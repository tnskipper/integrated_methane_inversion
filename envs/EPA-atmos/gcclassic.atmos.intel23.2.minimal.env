###############################################################################
# gcclassic.atmos.intel23.2.minimal.env
#
# Environment file for GCClassic + intel23.2 on EPA atmos cluster
#
# Does not include any Spack-built modules
###############################################################################

# Display message (if we are in a terminal window)
if [[ $- = *i* ]] ; then
  echo "Loading modules for GEOS-Chem Classic, please wait ..."
fi

#==============================================================================
# Unload all previously-unloaded software
#==============================================================================

# Unload packages loaded with "module load"
module purge

# Unload packages loaded with "spack load"
if [[ "x${SPACK_ROOT}" != "x" ]]; then
    which spack &> /dev/null || spack unload --all
fi

#==============================================================================
# Load software packages for intel 23.2
#==============================================================================
if [[ $- = *i* ]] ; then
  echo "... Loading modules, please wait ..."
fi

# FASRC-built modules needed for GEOS-Chem
#module load gcc/12.2.0-fasrc01             # gcc / g++ / gfortran
#module load openmpi/4.1.4-fasrc01          # MPI
#module load netcdf-c/4.9.2-fasrc01         # netcdf-c
#module load netcdf-fortran/4.6.0-fasrc02   # netcdf-fortran
#module load flex/2.6.4-fasrc01             # Flex lexer (needed for KPP)
#module load cmake/3.25.2-fasrc01           # CMake (needed to compile)

# Additional FASRC-built modules
# Uncomment if you need to use these
#module load IDL/8.7.2-fasrc01              # IDL language (needed for GAMAP)
#module load R/4.2.2-fasrc01                # R language
#module load matlab/R2022b-fasrc01          # matlab language

# atmos modules (intel)
module load gcc/12.2
module load intel/23.2            # intel compilers
module load intelmpi/23.2         # MPI
module load netcdf/4.9.2          # includes netcdf-c and netcdf-fortran
module load cmake/3.26.3          # CMake

#==============================================================================
# Environment variables and related settings
# (NOTE: Lmod will define <module>_HOME variables for each loaded module)
#==============================================================================

# Make all files world-readable by default
umask 022

# Set number of threads for OpenMP.  If running in a SLURM environment,
# use the number of requested cores.  Otherwise use 8 cores for OpenMP.
if [[ "x${SLURM_CPUS_PER_TASK}" == "x" ]]; then
    export OMP_NUM_THREADS=8
else
    export OMP_NUM_THREADS="${SLURM_CPUS_PER_TASK}"
fi

# Max out the stacksize memory limit
export OMP_STACKSIZE="500m"

# Compilers
export CC="icc"
export CXX="icx"
export FC="ifort"
export F77="${FC}"

# netCDF
#if [[ "x${NETCDF_HOME}" == "x" ]]; then
#    export NETCDF_HOME="${NETCDF_C_HOME}"
#fi
export NETCDF_HOME="/usr/local/apps/netcdf-4.9.2/intel-23.1"
export NETCDF_C_ROOT="${NETCDF_HOME}"
export NETCDF_FORTRAN_ROOT=${NETCDF_HOME}

# KPP 3.0.0+
export FLEX_HOME=/usr
export KPP_FLEX_LIB_DIR=${FLEX_HOME}/lib64

# intelmpi
export MPI_HOME="/usr/local/apps/oneapi/2023.2/mpi/2021.10.0"

# If you are using GEOS-Chem 12.6.0 or earlier,
# uncomment these lines and source this file again.
#export GC_INCLUDE=$NETCDF_INCLUDE
#export GC_BIN=$NETCDF_HOME/bin
#export GC_LIB=$NETCDF_LIB
#export GC_F_INCLUDE=$NETCDF_FORTRAN_INCLUDE
#export GC_F_LIB=$NETCDF_FORTRAN_LIB
#export GC_F_BIN=$NETCDF_FORTRAN_HOME/bin

#==============================================================================
# Set limits
#==============================================================================

#ulimit -c unlimited   # coredumpsize
#ulimit -u 50000       # maxproc
#ulimit -v unlimited   # vmemoryuse
#ulimit -s unlimited   # stacksize

#==============================================================================
# Print information
#==============================================================================

module list

echo ""
echo "Environment:"
echo ""
echo "CC                  : ${CC}"
echo "CXX                 : ${CXX}"
echo "FC                  : ${FC}"
echo "KPP_FLEX_LIB_DIR    : ${KPP_FLEX_LIB_DIR}"
echo "MPI_HOME            : ${MPI_HOME}"
echo "NETCDF_HOME         : ${NETCDF_HOME}"
echo "NETCDF_FORTRAN_HOME : ${NETCDF_HOME}"
echo "OMP_NUM_THREADS     : ${OMP_NUM_THREADS}"
echo ""
echo "Done sourcing ${BASH_SOURCE[0]}"
